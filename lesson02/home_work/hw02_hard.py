# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x - 11111140.2121'
x = 2.5
# вычислите и выведите y
k = float(equation[equation.find('=')+1:equation.find('x')])
b = equation[equation.find('x')+1:]
if b.find('-') != -1:
    b = -1*float(b[b.find('-')+1:])
else:
    b = float(b[b.find('+')+1:])

print('y=', k*x+b)

# вариант 2
equation = equation.replace(' ','') # удаляем все пробелы из строки,
#  теперь все числа конвертятся во флоат без проблем
k = float(equation[equation.find('=')+1:equation.find('x')])
b = float(equation[equation.find('x')+1:])
print('y=', k*x+b)


# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом 
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = '01.11.19854'

# Примеры некорректных дат
date = '01.22.1001'
date = '1.12.1001'
date = '20.10.0000'

months = {'01':31, '02':29, '03':31, '04':30, '05':31, '06':30, '07':31, '08':31, '09':30, '10':31, '11':30, '12':31}

correct = True
if len(date) == 10 and date[2] == '.' and date[5] == '.': # правильная длина и разделители в нужных местах
    dd = date[:2]
    mm = date[3:5]
    yyyy = date[6:]
    if date[0].isdigit() and date[1].isdigit(): # в позиции дня месяца 2 цифры
        if mm in months and int(dd) <= months[mm]: # проверяем месяц и количество дней
            if yyyy.isdigit() and yyyy!='0000':
                print('Правильная дата!!!')
            else:
                print("неверно указан год")
        else:
            print('неверно указан месяц или количество дней')
    else:
        print('неверно указан день')
else:
    print('неверный формат даты')


# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты, 
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

# Назовем группу этажей с одинаковым количеством квартир ярусом.
# так как этажей в одном ярусе столько же сколько квартир на этаже,
# то в одном ярусе n**2 квартир(где n - кол-тво квартир на одном
# этаже яруса, так же будем называть это номером яруса)

# количество квартир на первых n ярусах будет равно сумме квадратов
# первых n натуральных чисел, и находитсяя эта сумма по формуле:
#      S = n*(n+1)*(2n+1)/6
# данную формулу можно аппроксимировать : Sa = (n**3)/3, отсюда
# путем некоторых преобразований можно показать, что если k - номер
# квартиры с n-ного яруса, то n-0.5 < (k*3)**(1/3) < n+0.5, таким
# образом по формуле n = int((k*3)**(1/3)+ 0,5)  получаем номер
# яруса, на котором расположена нашаквартира. по первой формуле
# вычисляяем кол-тво квартир на предыдущих ярусах(s), по формуле суммы
# арифметической прогрессии fl =(n-1)*n/2 получаем количество этажей,
#  занятых предыдущими ярусами. теперь (k-s-1)//n+1 дает этаж
# квартиры на своем ярусе(прибавить m и получаем абсолютный этаж),
# (k-s-1)%n+1 - положение на этаже(считая с нуля)

k = 30  # рассматриваемая квартира
n = int((k*3)**(1/3) + 0.5)  # номер яруса
floors1 = int((n-1)*n/2)  # количество этажей в предыдущих ярусах
s = int((n-1)*n*(2*n-1)/6)  # количество квартир на n-1 ярусах
floor = floors1+(k-s-1)//n+1
pos = (k-s-1)%n+1
print(n, s, floors1)
print(floor, pos)

